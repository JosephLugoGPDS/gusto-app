// Mocks generated by Mockito 5.4.4 from annotations
// in app/test/tastes/domain/obtain_taste_types_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app/core/exceptions/domain_exception.dart' as _i5;
import 'package:app/data/models/dropdown_model.dart' as _i8;
import 'package:app/data/models/taste_detail_model.dart' as _i7;
import 'package:app/data/models/taste_list_model.dart' as _i6;
import 'package:app/data/repositories/tastes_repository.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TastesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTastesRepository extends _i1.Mock implements _i3.TastesRepository {
  @override
  _i4.Future<
      _i2.Either<_i5.DomainException, _i6.TasteListModel>> fetchTasteList(
          String? offset) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasteList,
          [offset],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.DomainException, _i6.TasteListModel>>.value(
            _FakeEither_0<_i5.DomainException, _i6.TasteListModel>(
          this,
          Invocation.method(
            #fetchTasteList,
            [offset],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.DomainException, _i6.TasteListModel>>.value(
            _FakeEither_0<_i5.DomainException, _i6.TasteListModel>(
          this,
          Invocation.method(
            #fetchTasteList,
            [offset],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DomainException, _i6.TasteListModel>>);

  @override
  _i4.Future<
      _i2.Either<_i5.DomainException, _i7.TasteDetailModel>> fetchTasteDetail(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasteDetail,
          [id],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.DomainException, _i7.TasteDetailModel>>.value(
            _FakeEither_0<_i5.DomainException, _i7.TasteDetailModel>(
          this,
          Invocation.method(
            #fetchTasteDetail,
            [id],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.Either<_i5.DomainException, _i7.TasteDetailModel>>.value(
            _FakeEither_0<_i5.DomainException, _i7.TasteDetailModel>(
          this,
          Invocation.method(
            #fetchTasteDetail,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.DomainException, _i7.TasteDetailModel>>);

  @override
  _i4.Future<
      _i2.Either<_i5.DomainException,
          List<_i8.DropdownModel>>> fetchTasteTypes() => (super.noSuchMethod(
        Invocation.method(
          #fetchTasteTypes,
          [],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.DomainException, List<_i8.DropdownModel>>>.value(
            _FakeEither_0<_i5.DomainException, List<_i8.DropdownModel>>(
          this,
          Invocation.method(
            #fetchTasteTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.Either<_i5.DomainException, List<_i8.DropdownModel>>>.value(
            _FakeEither_0<_i5.DomainException, List<_i8.DropdownModel>>(
          this,
          Invocation.method(
            #fetchTasteTypes,
            [],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i5.DomainException, List<_i8.DropdownModel>>>);
}
